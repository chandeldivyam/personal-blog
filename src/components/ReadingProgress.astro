---
export interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<div id="reading-progress" class={`reading-progress ${className}`}>
  <div class="reading-progress-bar" id="reading-progress-bar"></div>
</div>

<style>
  .reading-progress {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    z-index: 999;
    background-color: var(--color-border);
    opacity: 0;
    visibility: hidden;
  }

  .reading-progress.visible {
    opacity: 1;
    visibility: visible;
  }

  .reading-progress-bar {
    height: 100%;
    background: linear-gradient(
      90deg,
      var(--color-accent) 0%,
      var(--color-accent) 50%,
      var(--color-accent) 100%
    );
    width: 0%;
    position: relative;
    overflow: hidden;
  }

  /* Add a subtle shimmer effect */
  .reading-progress-bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    animation: shimmer 2s infinite;
  }

  @keyframes shimmer {
    0% {
      left: -100%;
    }
    100% {
      left: 100%;
    }
  }

  /* Reduce motion for users who prefer it */
  @media (prefers-reduced-motion: reduce) {
    .reading-progress {
      transition: none;
    }
    
    .reading-progress-bar {
      transition: none;
    }
    
    .reading-progress-bar::after {
      animation: none;
    }
  }

  /* Dark theme adjustments */
  [data-theme="dark"] .reading-progress {
    background-color: var(--color-border);
  }

  [data-theme="dark"] .reading-progress-bar {
    background: linear-gradient(
      90deg,
      var(--color-accent) 0%,
      var(--color-accent) 50%,
      var(--color-accent) 100%
    );
  }
</style>

<script>
  // Use a more TypeScript-friendly approach without extending Window
  const READING_PROGRESS_KEY = '__readingProgressHandler';
  
  // Store the handler using a key that TypeScript won't complain about
  if (!(window as any)[READING_PROGRESS_KEY]) {
    (window as any)[READING_PROGRESS_KEY] = function() {
      const progressContainer = document.getElementById('reading-progress');
      const progressBar = document.getElementById('reading-progress-bar');
      
      if (!progressContainer || !progressBar) return;
      
      // Check if we're on a blog post page
      const isArticlePage = document.querySelector('article .article-content');
      if (!isArticlePage) {
        progressContainer.classList.remove('visible');
        return;
      }
      
      const scrolled = window.scrollY;
      const maxHeight = document.documentElement.scrollHeight - window.innerHeight;
      
      // Show progress bar after scrolling a bit
      if (scrolled > 100) {
        progressContainer.classList.add('visible');
      } else {
        progressContainer.classList.remove('visible');
      }
      
      // Calculate progress percentage
      const progress = (scrolled / maxHeight) * 100;
      const clampedProgress = Math.min(100, Math.max(0, progress));
      
      progressBar.style.width = `${clampedProgress}%`;
    };
  }

  // Function to attach the event listener
  function attachReadingProgress() {
    const handler = (window as any)[READING_PROGRESS_KEY];
    
    if (handler) {
      // Remove any existing listeners first
      window.removeEventListener('scroll', handler);
      window.removeEventListener('resize', handler);
      
      // Add the listeners
      window.addEventListener('scroll', handler);
      window.addEventListener('resize', handler);
      
      // Initial check
      handler();
    }
  }

  // Attach on initial load
  attachReadingProgress();

  // Re-attach after each navigation with View Transitions
  document.addEventListener('astro:after-swap', attachReadingProgress);
</script>