---
---

<button
  id="theme-toggle"
  type="button"
  class="theme-toggle"
  aria-label="Toggle dark mode"
>
  <div class="icon-container">
    <svg class="sun-icon theme-icon" width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd" />
    </svg>
    <svg class="moon-icon theme-icon" width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
      <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
    </svg>
  </div>
</button>

<style>
  .theme-toggle {
    background: none;
    border: none;
    padding: var(--space-sm);
    border-radius: var(--border-radius);
    cursor: pointer;
    color: var(--color-text);
    transition: background-color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .theme-toggle:hover {
    background-color: var(--color-border);
  }

  .icon-container {
    position: relative;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .theme-icon {
    position: absolute;
    width: 20px;
    height: 20px;
    transition: opacity 0.2s ease, transform 0.2s ease;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  /* Light theme: show sun, hide moon */
  [data-theme="light"] .sun-icon {
    opacity: 1;
    transform: translate(-50%, -50%) rotate(0deg);
  }

  [data-theme="light"] .moon-icon {
    opacity: 0;
    transform: translate(-50%, -50%) rotate(180deg);
  }

  /* Dark theme: show moon, hide sun */
  [data-theme="dark"] .sun-icon {
    opacity: 0;
    transform: translate(-50%, -50%) rotate(-180deg);
  }

  [data-theme="dark"] .moon-icon {
    opacity: 1;
    transform: translate(-50%, -50%) rotate(0deg);
  }
</style>

<script>
  // Use a more TypeScript-friendly approach without extending Window
  const THEME_TOGGLE_KEY = '__themeToggleHandler';
  
  // Store the handler using a key that TypeScript won't complain about
  if (!(window as any)[THEME_TOGGLE_KEY]) {
    (window as any)[THEME_TOGGLE_KEY] = function() {
      const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      
      // Update button aria-label
      const button = document.getElementById('theme-toggle');
      if (button) {
        button.setAttribute('aria-label', `Switch to ${currentTheme} mode`);
      }
    };
  }

  // Function to attach the event listener
  function attachThemeToggle() {
    const button = document.getElementById('theme-toggle');
    const handler = (window as any)[THEME_TOGGLE_KEY];
    
    if (button && handler) {
      // Remove any existing listeners first
      button.removeEventListener('click', handler);
      // Add the listener
      button.addEventListener('click', handler);
      
      // Set initial aria-label
      const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
      button.setAttribute('aria-label', `Switch to ${currentTheme === 'dark' ? 'light' : 'dark'} mode`);
    }
  }

  // Attach on initial load
  attachThemeToggle();

  // Re-attach after each navigation with View Transitions
  document.addEventListener('astro:after-swap', attachThemeToggle);
</script>