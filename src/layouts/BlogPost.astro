---
import Base from './Base.astro';
import { formatDate, readingTime } from '../lib/utils';

export interface Props {
  title: string;
  description: string;
  pubDate: Date;
  updatedDate?: Date;
  tags?: string[];
  image?: string;
}

const { title, description, pubDate, updatedDate, tags = [], image } = Astro.props;
const content = await Astro.slots.render('default');
const readTime = readingTime(content);
---

<Base title={title} description={description} image={image}>
  <article class="container">
    <header class="article-header">
      <h1 class="article-title">{title}</h1>
      <p class="article-description">{description}</p>
      
      <div class="article-meta">
        <time datetime={pubDate.toISOString()}>
          {formatDate(pubDate)}
        </time>
        <span class="separator">•</span>
        <span class="reading-time">{readTime}</span>
        {updatedDate && (
          <>
            <span class="separator">•</span>
            <span class="updated">
              Updated: <time datetime={updatedDate.toISOString()}>
                {formatDate(updatedDate)}
              </time>
            </span>
          </>
        )}
      </div>
      
      {tags.length > 0 && (
        <div class="article-tags">
          {tags.map((tag) => (
            <span class="tag">#{tag}</span>
          ))}
        </div>
      )}
    </header>
    
    <div class="article-content">
      <slot />
    </div>
  </article>
</Base>

<style>
  .article-header {
    margin-bottom: var(--space-xl);
    padding-bottom: var(--space-lg);
    border-bottom: 1px solid var(--color-border);
  }

  .article-title {
    font-size: var(--font-size-4xl);
    margin-bottom: var(--space-md);
    line-height: var(--line-height-tight);
  }

  .article-description {
    font-size: var(--font-size-lg);
    color: var(--color-text-secondary);
    line-height: var(--line-height-normal);
    margin-bottom: var(--space-lg);
  }

  .article-meta {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    margin-bottom: var(--space-md);
  }

  .separator {
    opacity: 0.5;
  }

  .article-tags {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-sm);
  }

  .tag {
    background-color: var(--color-border);
    color: var(--color-text-secondary);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--border-radius);
    font-size: 0.75rem;
    font-weight: 500;
  }

  .article-content {
    max-width: none;
    line-height: var(--line-height-relaxed);
  }

  .article-content :global(h2),
  .article-content :global(h3),
  .article-content :global(h4) {
    margin-top: var(--space-xl);
    margin-bottom: var(--space-md);
  }

  .article-content :global(h2:first-child),
  .article-content :global(h3:first-child),
  .article-content :global(h4:first-child) {
    margin-top: 0;
  }

  .article-content :global(img) {
    border-radius: var(--border-radius);
    margin: var(--space-lg) 0;
  }

  .article-content :global(table) {
    width: 100%;
    border-collapse: collapse;
    margin: var(--space-lg) 0;
  }

  .article-content :global(th),
  .article-content :global(td) {
    border: 1px solid var(--color-border);
    padding: var(--space-sm);
    text-align: left;
  }

  .article-content :global(th) {
    background-color: var(--color-border);
    font-weight: 600;
  }

  @media (max-width: 768px) {
    .article-title {
      font-size: var(--font-size-3xl);
    }

    .article-meta {
      flex-wrap: wrap;
    }
  }
</style>